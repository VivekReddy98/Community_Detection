{
	"create": {
		"node": "CREATE (<uid>:<label> {name:'<name>', cluster:'<cluster>'});",
		"relation": "MATCH (n:<label>),(m:<label>) WHERE n.uid='<uid>' AND m.uid in <set> CREATE (n)-[:KNOWS]->(m);",
		"index": "CREATE INDEX ON :<label>(<index>);"
	},
	"remove": {
		"node": "MATCH (a:<label> {uid: '<uid>'}) DELETE a;",
		"property_all": "MATCH (a:<label>) REMOVE a.<prop> ;",
		"property_node": "MATCH (a:<label> {uid: '<uid>'}) REMOVE a.<prop>;",
		"label_all": "MATCH (a:<label>) REMOVE a:<label> ;",
		"label_node": "MATCH (a:<label> {uid: '<uid>'}) REMOVE a:<label> ;"
	},
	"unique": {
		"property": "MATCH (n:<label>) WHERE EXISTS(n.<prop>) RETURN DISTINCT n.<prop> AS <prop>, count(n) as numNodes ORDER BY numNodes DESC;",
		"property_PR": "MATCH (n:<label>) WHERE EXISTS(n.pagerank) RETURN n.uid AS uid, n.pagerank AS pagerank ORDER BY pagerank DESC;",
		"property_PR_local": "MATCH (n:<label>) WHERE n.partition=<part> RETURN n.uid AS uid, n.<prop> AS <prop> ORDER BY <prop> DESC LIMIT <lim>;"
	},
	"PageRank": {
		"query": "CALL algo.pageRank.stream('<label>', 'KNOWS', {dampingFactor:<df>, iterations:<itr>}) Yield nodeId, score RETURN algo.asNode(nodeId).name AS node,score ORDER BY score DESC;",
		"query_write": "CALL algo.pageRank('<label>', 'KNOWS', {iterations:<itr>, dampingFactor:<df>, write: true, writeProperty:'pagerank'});"
	},
	"match": {
		"node": "MATCH (n:<label>) WHERE n.uid='<uid1>' RETURN n;",
		"node2": "MATCH (n:<label>) WHERE n.uid='<uid1>' or n.uid='<uid2>' RETURN n;",
		"list_match": "UNWIND <set> AS x MATCH (n:<label>) WHERE n.uid=x RETURN n;",
		"neighbours": "MATCH (n:<label>{uid:'<uid>'}),(m:<label>) WHERE n.partition=m.partition RETURN DISTINCT m.C_D;",
		"partition": "MATCH (n:<label>{uid:'<uid>'}), (c) WHERE RETURN DISTINCT c.C_D;",
		"C_s": "MATCH (n:<label>{uid:'<uid>'})-[:KNOWS]->(c:<label>) RETURN count(c);",
		"edge_inside": "MATCH (n:<label>{uid:'<uid>'})-[:KNOWS]->(c:<label>) WHERE c.C_D CONTAINS '|<cid>|' RETURN count(c);",
		"edge_outside": "MATCH (n:<label>{uid:'<uid>'})-[:KNOWS]->(c:<label>) WHERE NOT c.C_D CONTAINS '|<cid>|' RETURN count(c);"
	},
	"CC": {
		"query_write": "CALL algo.unionFind('<label>', 'KNOWS', {write:true, partitionProperty:'partition'})",
		"query": "CALL algo.unionFind.stream('<label>', 'KNOWS', {}) YIELD nodeId,setId RETURN algo.asNode(nodeId).uid AS Node, setId"
	},
	"cluster": {
		"ask": "MATCH (n:<label>) WHERE n.uid='<uid>' RETURN n.C_D;",
		"set": "MATCH (n:<label>) WHERE n.uid='<uid>' SET n.C_D = '<cid>';",
		"remove": "MATCH (n:<label>{uid:<uid>}) SET n.C_D = '<cid>';",
		"nodes": "MATCH (n:<label>) WHERE n.C_D CONTAINS '|<cid>|' RETURN DISTINCT n.uid AS uid;",
		"one_hop_neigh": "MATCH (n:<label>)-[*0..1]->(m:<label>) WHERE EXISTS(m.pagerank) AND n.C_D CONTAINS '|<cid>|' RETURN DISTINCT m.uid AS uid, m.C_D AS C_D;"
	},
	"conductance": {
		"M_s": "MATCH (n:<label>)-[r:KNOWS]->(m:<label>) where n.C_D CONTAINS '|<cid>|' AND m.C_D CONTAINS '|<cid>|' return count(r)",
		"C_s": "MATCH (n:<label>)-[r:KNOWS]->(m:<label>) where n.C_D CONTAINS '|<cid>|' AND NOT m.C_D CONTAINS '|<cid>|' return count(r)"
	}
}